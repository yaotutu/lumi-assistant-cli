# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import lumi_pb2 as lumi__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lumi_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LumiAssistantStub(object):
    """*
    Lumi Assistant - AI语音助手gRPC服务接口

    接口设计理念：
    1. 任务驱动架构 - 所有操作立即返回task_id，异步处理
    2. 事件流系统 - 通过GetEventStream实时接收处理进度和结果
    3. 未来扩展 - 预留流式接口支持高级功能

    提供完整的AI语音助手功能：
    - 语音录制和识别 (ASR)
    - 智能文本对话 (LLM)
    - 语音合成 (TTS)
    - 会话管理和持久化
    - 系统状态监控和健康检查
    - 流式处理支持（预留扩展）
    === 当前实现的接口 ===
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartRecording = channel.unary_unary(
                '/lumi.LumiAssistant/StartRecording',
                request_serializer=lumi__pb2.StartRecordingRequest.SerializeToString,
                response_deserializer=lumi__pb2.StartRecordingResponse.FromString,
                _registered_method=True)
        self.StopRecording = channel.unary_unary(
                '/lumi.LumiAssistant/StopRecording',
                request_serializer=lumi__pb2.StopRecordingRequest.SerializeToString,
                response_deserializer=lumi__pb2.StopRecordingResponse.FromString,
                _registered_method=True)
        self.SendText = channel.unary_unary(
                '/lumi.LumiAssistant/SendText',
                request_serializer=lumi__pb2.SendTextRequest.SerializeToString,
                response_deserializer=lumi__pb2.SendTextResponse.FromString,
                _registered_method=True)
        self.GetEventStream = channel.unary_stream(
                '/lumi.LumiAssistant/GetEventStream',
                request_serializer=lumi__pb2.Empty.SerializeToString,
                response_deserializer=lumi__pb2.ProcessEvent.FromString,
                _registered_method=True)
        self.NewSession = channel.unary_unary(
                '/lumi.LumiAssistant/NewSession',
                request_serializer=lumi__pb2.NewSessionRequest.SerializeToString,
                response_deserializer=lumi__pb2.NewSessionResponse.FromString,
                _registered_method=True)
        self.GetSessionInfo = channel.unary_unary(
                '/lumi.LumiAssistant/GetSessionInfo',
                request_serializer=lumi__pb2.GetSessionInfoRequest.SerializeToString,
                response_deserializer=lumi__pb2.GetSessionInfoResponse.FromString,
                _registered_method=True)
        self.ListSessions = channel.unary_unary(
                '/lumi.LumiAssistant/ListSessions',
                request_serializer=lumi__pb2.ListSessionsRequest.SerializeToString,
                response_deserializer=lumi__pb2.ListSessionsResponse.FromString,
                _registered_method=True)
        self.LoadSession = channel.unary_unary(
                '/lumi.LumiAssistant/LoadSession',
                request_serializer=lumi__pb2.LoadSessionRequest.SerializeToString,
                response_deserializer=lumi__pb2.LoadSessionResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/lumi.LumiAssistant/GetStatus',
                request_serializer=lumi__pb2.Empty.SerializeToString,
                response_deserializer=lumi__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/lumi.LumiAssistant/HealthCheck',
                request_serializer=lumi__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=lumi__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.StreamASR = channel.stream_stream(
                '/lumi.LumiAssistant/StreamASR',
                request_serializer=lumi__pb2.AudioChunk.SerializeToString,
                response_deserializer=lumi__pb2.ASRResult.FromString,
                _registered_method=True)
        self.StreamTTS = channel.stream_stream(
                '/lumi.LumiAssistant/StreamTTS',
                request_serializer=lumi__pb2.TTSRequest.SerializeToString,
                response_deserializer=lumi__pb2.AudioChunk.FromString,
                _registered_method=True)
        self.StreamConversation = channel.stream_stream(
                '/lumi.LumiAssistant/StreamConversation',
                request_serializer=lumi__pb2.ConversationInput.SerializeToString,
                response_deserializer=lumi__pb2.ConversationOutput.FromString,
                _registered_method=True)


class LumiAssistantServicer(object):
    """*
    Lumi Assistant - AI语音助手gRPC服务接口

    接口设计理念：
    1. 任务驱动架构 - 所有操作立即返回task_id，异步处理
    2. 事件流系统 - 通过GetEventStream实时接收处理进度和结果
    3. 未来扩展 - 预留流式接口支持高级功能

    提供完整的AI语音助手功能：
    - 语音录制和识别 (ASR)
    - 智能文本对话 (LLM)
    - 语音合成 (TTS)
    - 会话管理和持久化
    - 系统状态监控和健康检查
    - 流式处理支持（预留扩展）
    === 当前实现的接口 ===
    """

    def StartRecording(self, request, context):
        """*
        开始录音

        功能：启动麦克风录音，立即返回task_id
        流程：请求 → 立即返回task_id → 异步启动录音 → 发送RECORDING_STARTED事件
        注意：同时只能有一个录音任务，重复调用会返回失败
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRecording(self, request, context):
        """*
        停止录音

        功能：停止麦克风录音，启动音频处理链路
        流程：请求 → 立即返回task_id → 停止录音 → ASR识别 → LLM处理 → TTS合成 → 音频播放
        事件：RECORDING_STOPPED → ASR_RESULT → LLM_CHUNK... → LLM_COMPLETE → TTS_STARTED → TTS_COMPLETE → TASK_COMPLETE
        注意：只有在录音状态下才能调用，否则返回失败
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendText(self, request, context):
        """*
        发送文本消息

        功能：直接发送文本消息到LLM进行对话
        流程：请求 → 立即返回task_id → LLM处理 → TTS合成 → 音频播放
        事件：LLM_CHUNK... → LLM_COMPLETE → TTS_STARTED → TTS_COMPLETE → TASK_COMPLETE
        优势：跳过录音和ASR步骤，直接进入文本对话模式
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventStream(self, request, context):
        """*
        获取实时事件流

        功能：订阅所有任务的实时处理事件
        事件类型：
        - RECORDING_STARTED/STOPPED: 录音状态变化
        - ASR_RESULT: 语音识别结果
        - LLM_CHUNK: LLM流式响应片段
        - LLM_COMPLETE: LLM响应完成
        - TTS_STARTED/COMPLETE: 语音合成状态
        - TASK_COMPLETE: 整个任务完成
        - TASK_ERROR: 任务执行出错

        使用建议：客户端应在启动时立即订阅此流，以接收所有任务的实时反馈
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewSession(self, request, context):
        """=== 会话管理接口 ===
        支持多会话管理，包括创建、切换、持久化存储

        *
        创建新会话

        功能：创建一个新的对话会话，清空上下文历史
        使用场景：开始新的话题或清空对话历史
        注意：新会话会成为当前活跃会话，后续所有对话都在此会话中进行
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionInfo(self, request, context):
        """*
        获取当前活跃会话信息

        功能：获取当前正在使用的会话的详细信息
        返回信息：会话session_id、创建时间、消息数量、会话标题
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSessions(self, request, context):
        """*
        列出历史会话列表

        功能：获取历史会话列表，按时间倒序排列
        参数：limit 限制返回数量，默认为10个
        使用场景：展示对话历史，支持用户选择恢复历史会话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadSession(self, request, context):
        """*
        加载指定历史会话

        功能：切换到指定的历史会话，恢复上下文历史
        参数：session_id 需要加载的会话唯一标识符
        效果：加载成功后，该会话成为当前活跃会话，后续对话在此基础上继续
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """=== 系统状态监控接口 ===
        用于监控服务器运行状态和性能指标

        *
        获取系统实时状态

        功能：获取服务器当前的运行状态和统计信息
        返回信息：
        - is_recording: 是否正在录音
        - active_tasks: 当前正在处理的任务数量
        - active_clients: 当前连接的客户端数量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """*
        系统健康检查

        功能：全面检查服务器和各组件的健康状态
        检查项目：
        - ASR服务可用性
        - LLM服务可用性 
        - TTS服务可用性
        - 系统整体健康状态
        返回信息：版本号、健康状态、各服务组件状态列表
        使用场景：服务监控、负载均衡检查、故障诊断
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamASR(self, request_iterator, context):
        """=== 未来流式接口（预留扩展） ===
        这些接口为未来的高级功能做准备，目前返回UNIMPLEMENTED状态

        *
        流式语音识别（未来实现）

        预期功能：实时接收音频流，实时返回ASR结果
        优势：更低延迟、支持长时间连续识别、部分结果实时反馈
        适用场景：实时对话、语音输入法、会议记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTTS(self, request_iterator, context):
        """*
        流式语音合成（未来实现）

        预期功能：实时接收文本流，按段落生成音频并流式返回
        优势：更低首字延迟、支持超长文本、实时播放
        适用场景：实时播音、有声书、直播室
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamConversation(self, request_iterator, context):
        """*
        双向流式对话（未来实现）

        预期功能：统一的双向流式接口，支持音频、文本、命令混合输入
        优势：更简单的客户端集成、更低的连接开销、更高的并发性能
        适用场景：完全流式对话系统、多模态交互、高并发场景
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LumiAssistantServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRecording,
                    request_deserializer=lumi__pb2.StartRecordingRequest.FromString,
                    response_serializer=lumi__pb2.StartRecordingResponse.SerializeToString,
            ),
            'StopRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRecording,
                    request_deserializer=lumi__pb2.StopRecordingRequest.FromString,
                    response_serializer=lumi__pb2.StopRecordingResponse.SerializeToString,
            ),
            'SendText': grpc.unary_unary_rpc_method_handler(
                    servicer.SendText,
                    request_deserializer=lumi__pb2.SendTextRequest.FromString,
                    response_serializer=lumi__pb2.SendTextResponse.SerializeToString,
            ),
            'GetEventStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEventStream,
                    request_deserializer=lumi__pb2.Empty.FromString,
                    response_serializer=lumi__pb2.ProcessEvent.SerializeToString,
            ),
            'NewSession': grpc.unary_unary_rpc_method_handler(
                    servicer.NewSession,
                    request_deserializer=lumi__pb2.NewSessionRequest.FromString,
                    response_serializer=lumi__pb2.NewSessionResponse.SerializeToString,
            ),
            'GetSessionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionInfo,
                    request_deserializer=lumi__pb2.GetSessionInfoRequest.FromString,
                    response_serializer=lumi__pb2.GetSessionInfoResponse.SerializeToString,
            ),
            'ListSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSessions,
                    request_deserializer=lumi__pb2.ListSessionsRequest.FromString,
                    response_serializer=lumi__pb2.ListSessionsResponse.SerializeToString,
            ),
            'LoadSession': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadSession,
                    request_deserializer=lumi__pb2.LoadSessionRequest.FromString,
                    response_serializer=lumi__pb2.LoadSessionResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=lumi__pb2.Empty.FromString,
                    response_serializer=lumi__pb2.StatusResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=lumi__pb2.HealthCheckRequest.FromString,
                    response_serializer=lumi__pb2.HealthCheckResponse.SerializeToString,
            ),
            'StreamASR': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamASR,
                    request_deserializer=lumi__pb2.AudioChunk.FromString,
                    response_serializer=lumi__pb2.ASRResult.SerializeToString,
            ),
            'StreamTTS': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTTS,
                    request_deserializer=lumi__pb2.TTSRequest.FromString,
                    response_serializer=lumi__pb2.AudioChunk.SerializeToString,
            ),
            'StreamConversation': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamConversation,
                    request_deserializer=lumi__pb2.ConversationInput.FromString,
                    response_serializer=lumi__pb2.ConversationOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lumi.LumiAssistant', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lumi.LumiAssistant', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LumiAssistant(object):
    """*
    Lumi Assistant - AI语音助手gRPC服务接口

    接口设计理念：
    1. 任务驱动架构 - 所有操作立即返回task_id，异步处理
    2. 事件流系统 - 通过GetEventStream实时接收处理进度和结果
    3. 未来扩展 - 预留流式接口支持高级功能

    提供完整的AI语音助手功能：
    - 语音录制和识别 (ASR)
    - 智能文本对话 (LLM)
    - 语音合成 (TTS)
    - 会话管理和持久化
    - 系统状态监控和健康检查
    - 流式处理支持（预留扩展）
    === 当前实现的接口 ===
    """

    @staticmethod
    def StartRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/StartRecording',
            lumi__pb2.StartRecordingRequest.SerializeToString,
            lumi__pb2.StartRecordingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/StopRecording',
            lumi__pb2.StopRecordingRequest.SerializeToString,
            lumi__pb2.StopRecordingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/SendText',
            lumi__pb2.SendTextRequest.SerializeToString,
            lumi__pb2.SendTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEventStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/lumi.LumiAssistant/GetEventStream',
            lumi__pb2.Empty.SerializeToString,
            lumi__pb2.ProcessEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/NewSession',
            lumi__pb2.NewSessionRequest.SerializeToString,
            lumi__pb2.NewSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSessionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/GetSessionInfo',
            lumi__pb2.GetSessionInfoRequest.SerializeToString,
            lumi__pb2.GetSessionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/ListSessions',
            lumi__pb2.ListSessionsRequest.SerializeToString,
            lumi__pb2.ListSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/LoadSession',
            lumi__pb2.LoadSessionRequest.SerializeToString,
            lumi__pb2.LoadSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/GetStatus',
            lumi__pb2.Empty.SerializeToString,
            lumi__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lumi.LumiAssistant/HealthCheck',
            lumi__pb2.HealthCheckRequest.SerializeToString,
            lumi__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamASR(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/lumi.LumiAssistant/StreamASR',
            lumi__pb2.AudioChunk.SerializeToString,
            lumi__pb2.ASRResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTTS(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/lumi.LumiAssistant/StreamTTS',
            lumi__pb2.TTSRequest.SerializeToString,
            lumi__pb2.AudioChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamConversation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/lumi.LumiAssistant/StreamConversation',
            lumi__pb2.ConversationInput.SerializeToString,
            lumi__pb2.ConversationOutput.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
